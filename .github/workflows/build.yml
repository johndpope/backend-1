name: Backend

on:
  push:
    branches:
      - master
    paths-ignore:
      - docker/**
      - .github/workflows/dockerbuild.yml

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ap-northeast-1

jobs:
  # Docker Build
  Build:
    name: Build and deploy
    runs-on: ubuntu-latest

    steps:
      # checkout
      - uses: actions/checkout@master

      # install nodejs
      - uses: actions/setup-node@master
        with:
          node-version: 12.x

      # Library install
      - name: install and build
        run: |
          yarn install
          yarn build

      # zip folders
      - name: zip folder
        working-directory: build/lambda
        run: |
          zip -r -j start start/**
          zip -r -j stop stop/**

      # Lambda Deploy
      - uses: docker://amazon/aws-cli
        with:
          args: lambda update-function-code --function-name PocketCards_ECS_Start --zip fileb://./build/lambda/start.zip

      - uses: docker://amazon/aws-cli
        with:
          args: lambda update-function-code --function-name PocketCards_ECS_Stop --zip fileb://./build/lambda/stop.zip

      # ECR Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Push to ECR
      - name: ECR Push
        run: |
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pocket-cards/backend

  Slack:
    needs:
      - Build

    runs-on: ubuntu-latest

    steps:
      - name: Slack Notify
        uses: rtCamp/action-slack-notify@v2.0.1
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: build
          SLACK_TITLE: Backend Build
          SLACK_COLOR: '#43a047'
          SLACK_MESSAGE: ${{ github.repository }} Build Success
          SLACK_USERNAME: ${{ github.repository }}

  BuildFailed:
    needs:
      - Build

    runs-on: ubuntu-latest

    steps:
      - name: Build Failed Notify
        uses: rtCamp/action-slack-notify@v2.0.1
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: build
          SLACK_TITLE: Build Failed
          SLACK_COLOR: '#43a047'
          SLACK_MESSAGE: ${{ github.repository }} Build Failed...
          SLACK_USERNAME: ${{ github.repository }}
